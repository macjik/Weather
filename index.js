const main = document.querySelector("main");
const input = document.querySelector("input");
const resultBox = document.querySelector(".result-box");
const defaultWeather = document.querySelector(".default-weather");
const searchInput = document.querySelector(".input-group");
const autocompleteBox = document.querySelector(".autocomplete-box");
const selectCity = document.querySelector(".select-city");
const searchWeatherBox = document.querySelector(".searched-weather");
const apiKey = "f8a1de17acc28031a2d525b8a27fc43a";
const arr = [];
let timeout = null;

//svg as the containers. Data wrapped

//set these in the html itself
const card = document.createElement("div");
card.className = "card-deck main-card";
const countryCard = document.createElement("div");
countryCard.className = "card country-card";
const humidityCard = document.createElement("div");
humidityCard.className = "card humidity-card";
const windSpeedCard = document.createElement("div");
windSpeedCard.className = "card windSpeed-card";
const feelsLikeCard = document.createElement("div");
feelsLikeCard.className = "card feelsLike-card";

const city = document.createElement("h6");
city.className = "City";
const Country = document.createElement("h6");
Country.className = "country";
const time = document.createElement("p");
time.className = "time";
const Weather = document.createElement("div");
Weather.className = "weather";
const WindSpeed = document.createElement("h6");
WindSpeed.className = "wind-speed";
const temp = document.createElement("h6");
temp.className = "Temperature";
const FeelsLike = document.createElement("h6");
FeelsLike.className = "temp-feel";
const Humidity = document.createElement("h6");
Humidity.className = "humidity";
const Clouds = document.createElement("div");
Clouds.className = "clouds";
const weatherIcon = document.createElement("div");
weatherIcon.className = "Weather-Icon";

const humidityIcon = document.createElement("div");
humidityIcon.className = "humidity-icon";
humidityIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100" width="200px" height="200px" style="width:100%;height:100%;background-size:initial;background-repeat-y:initial;background-repeat-x:initial;background-position-y:initial;background-position-x:initial;background-origin:initial;background-color:initial;background-clip:initial;background-attachment:initial;animation-play-state:paused"><g class="ldl-scale" style="transform-origin:50% 50%;transform:rotate(0deg) scale(0.8, 0.8);animation-play-state:paused"><path stroke-miterlimit="10" stroke-width="3.5" stroke="#333" fill="#a0c8d7" d="M74.5 57.1c0 23.5-11 32.9-24.6 32.9s-24.5-9.4-24.5-32.9S50 10 50 10s24.5 23.7 24.5 47.1z" style="stroke:rgb(51, 51, 51);fill:rgb(160, 200, 215);animation-play-state:paused"/>
<path stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round" stroke-width="3.5" stroke="#fff" fill="none" d="M38.5 34.6c2.2-3.5 4.5-6.7 6.5-9.1" style="stroke:rgb(255, 255, 255);animation-play-state:paused"/>
<path stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round" stroke-width="3.5" stroke="#fff" fill="none" d="M34.1 43.2l.9-2.1" style="stroke:rgb(255, 255, 255);animation-play-state:paused"/>
<path stroke-miterlimit="10" stroke-width="3.5" stroke="#000" opacity=".1" d="M67.2 32.6c-6.4 24.3-17.5 43.8-30.1 53.7 3.7 2.5 8.1 3.6 12.9 3.6 13.6 0 24.6-9.4 24.6-32.9-.1-8.4-3.3-16.9-7.4-24.4z" style="animation-play-state:paused"/>
<metadata xmlns:d="https://loading.io/stock/" style="animation-play-state:paused"><d:name style="animation-play-state:paused">water</d:name>


<d:tags style="animation-play-state:paused">water,dip,drop,drip,wet,moist,rain,damp,humid,clammy</d:tags>


<d:license style="animation-play-state:paused">by</d:license>


<d:slug style="animation-play-state:paused">r5q9g4</d:slug></metadata></g><!-- generated by https://loading.io/ --></svg>
<g xmlns="http://www.w3.org/2000/svg" class="ldl-scale" style="transform-origin:50% 50%;transform:rotate(0deg) scale(0.8, 0.8);animation-play-state:paused"><path stroke-miterlimit="10" stroke-width="3.5" stroke="#333" fill="#a0c8d7" d="M74.5 57.1c0 23.5-11 32.9-24.6 32.9s-24.5-9.4-24.5-32.9S50 10 50 10s24.5 23.7 24.5 47.1z" style="stroke:rgb(51, 51, 51);fill:rgb(160, 200, 215);animation-play-state:paused"/>
<path stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round" stroke-width="3.5" stroke="#fff" fill="none" d="M38.5 34.6c2.2-3.5 4.5-6.7 6.5-9.1" style="stroke:rgb(255, 255, 255);animation-play-state:paused"/>
<path stroke-miterlimit="10" stroke-linejoin="round" stroke-linecap="round" stroke-width="3.5" stroke="#fff" fill="none" d="M34.1 43.2l.9-2.1" style="stroke:rgb(255, 255, 255);animation-play-state:paused"/>
<path stroke-miterlimit="10" stroke-width="3.5" stroke="#000" opacity=".1" d="M67.2 32.6c-6.4 24.3-17.5 43.8-30.1 53.7 3.7 2.5 8.1 3.6 12.9 3.6 13.6 0 24.6-9.4 24.6-32.9-.1-8.4-3.3-16.9-7.4-24.4z" style="animation-play-state:paused"/>
<metadata xmlns:d="https://loading.io/stock/" style="animation-play-state:paused"><d:name style="animation-play-state:paused">water</d:name>


<d:tags style="animation-play-state:paused">water,dip,drop,drip,wet,moist,rain,damp,humid,clammy</d:tags>


<d:license style="animation-play-state:paused">by</d:license>


<d:slug style="animation-play-state:paused">r5q9g4</d:slug></metadata></g>`;

const weather = () => {
  fetch(`https://countriesnow.space/api/v0.1/countries`)
    .then((response) => response.json())
    .then((data) => {
      console.log(data);
      const Data = data.data;
      const mapped = Data.map((cities) => cities.cities);
      for (const city of mapped) {
        for (const c of city) {
          arr.push(c);
        }
      }
      console.log(arr); //any matching letter with the starting of arr elements in the userData should be suggested

      input.addEventListener("keyup", (e) => {
        const userData = e.target.value;
        let emptyArr = [];
        if (userData) {
          //has to be under the fetch
          fetch(
            `https://api.openweathermap.org/data/2.5/weather?q=${userData}&appid=${apiKey}&units=metric`
          ) //putting it before the condition would make more sense
            .then((response) => response.json())
            .then((data) => {
              if (e.key === "Enter") {
                console.log(data);
                const cityName = data.name;
                const cityTimeZone = data.timezone;
                const clouds = data.clouds;
                const weather = data.weather[0].main;
                const countryName = data.sys.country;
                const windSpeed = data.wind.speed;
                const temperature = data.main.temp;
                const feelsLike = data.main.feels_like;
                const humidity = data.main.humidity;

                fetch("https://restcountries.com/v3.1/all")
                  .then((res) => res.json())
                  .then((data) => {
                    console.log(data);
                    for (const abb of data) {
                      if (abb.cca2 == countryName) {
                        const country = abb.name.common;
                        console.log(country);

                        city.textContent = cityName;
                        Country.textContent = country;
                        time.textContent = cityTimeZone;
                        Weather.innerHTML = weather;
                        WindSpeed.textContent =
                          `Wind Speed ${Math.round(windSpeed)}` + " m/s";
                        temp.textContent =
                          `${Math.round(temperature)} ` + " °C";
                        FeelsLike.textContent =
                          `Feels like ${Math.round(feelsLike)} ` + " °C";
                        Humidity.innerHTML = `Humidity ${humidity}%`; //add the svg here

                        card.append(city, time, Weather, temp, weatherIcon);
                        console.log(Weather);
                        searchWeatherBox.append(card);

                        countryCard.append(Country);
                        humidityCard.append(Humidity);
                        windSpeedCard.append(WindSpeed);
                        feelsLikeCard.append(FeelsLike);

                        card.append(
                          countryCard,
                          humidityCard,
                          windSpeedCard,
                          feelsLikeCard
                        );

                        // Clouds.innerHTML = clouds

                        if (Weather.textContent === "Clouds") {
                          weatherIcon.innerHTML = `<svg
                          class = CLOUD'
                          version="1.1"
                          xmlns="http://www.w3.org/2000/svg"
                          xmlns:xlink="http://www.w3.org/1999/xlink"
                          width="100"
                          height="100"
                          viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                              <feMerge>
                                <feMergeNode/>
                                <feMergeNode in="SourceGraphic"/>
                              </feMerge>
                              </filter>
                              </defs>
                              <g filter="url(#blur)" id="cloudy">
                                  <g transform="translate(20,10)">
                                      <g class="am-weather-cloud-1">
                                          <path d="M47.7,35.4     c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3     c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#91C0F8" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-10,-8), scale(0.6)"/>
                                      </g>
                                      <g class="am-weather-cloud-2">
                                          <path d="M47.7,35.4     c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3     c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#57A0EE" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-20,-11)"/>
                                      </g>
                                  </g>
                              </g>
                          </svg>`;
                        }

                        if (Weather.textContent === "Rain") {
                          weatherIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="64" height="64" viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                                  <feMerge> 
                                      <feMergeNode/>
                                      <feMergeNode in="SourceGraphic"/> 
                                  </feMerge>
                              </filter>

                          </defs>
                          <g filter="url(#blur)" id="rainy-6">
                              <g transform="translate(20,10)">
                                  <g>
                                      <path d="M47.7,35.4c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3    c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#57A0EE" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-20,-11)"/>
                                  </g>
                              </g>
                              <g transform="translate(31,46), rotate(10)">
                                  <line class="am-weather-rain-1" fill="none" stroke="#91C0F8" stroke-dasharray="4,4" stroke-linecap="round" stroke-width="2" transform="translate(-4,1)" x1="0" x2="0" y1="0" y2="8"/>
                                  <line class="am-weather-rain-2" fill="none" stroke="#91C0F8" stroke-dasharray="4,4" stroke-linecap="round" stroke-width="2" transform="translate(0,-1)" x1="0" x2="0" y1="0" y2="8"/>
                                  <line class="am-weather-rain-1" fill="none" stroke="#91C0F8" stroke-dasharray="4,4" stroke-linecap="round" stroke-width="2" transform="translate(4,0)" x1="0" x2="0" y1="0" y2="8"/>
                              </g>
                          </g>
                      </svg>`;
                        }

                        if (Weather.textContent === "Snow") {
                          weatherIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="64" height="64" viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                                  <feMerge> 
                                      <feMergeNode/>
                                      <feMergeNode in="SourceGraphic"/> 
                                  </feMerge>
                              </filter>
                          </defs>
                          <g filter="url(#blur)" id="snowy-6">
                              <g transform="translate(20,10)">
                                  <g class="am-weather-cloud-2">
                                      <path d="M47.7,35.4c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3    c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#57A0EE" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-20,-11)"/>
                                  </g>
                                  <g class="am-weather-snow-1">
                                      <g transform="translate(3,28)">
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1.2" transform="translate(0,9), rotate(0)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(45)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(90)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(135)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                      </g>
                                  </g>
                                  <g class="am-weather-snow-2">
                                      <g transform="translate(11,28)">
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1.2" transform="translate(0,9), rotate(0)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(45)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(90)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(135)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                      </g>
                                  </g>
                                  <g class="am-weather-snow-3">
                                      <g transform="translate(20,28)">
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1.2" transform="translate(0,9), rotate(0)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(45)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(90)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(135)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                      </g>
                                  </g>
                              </g>
                          </g>
                      </svg>`;
                        }

                        if (Weather.textContent === "Thunder") {
                          weatherIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="64" height="64" viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                                  <feMerge> 
                                      <feMergeNode/>
                                      <feMergeNode in="SourceGraphic"/> 
                                  </feMerge>
                              </filter>
                          </defs>
                          <g filter="url(#blur)" id="day">
                              <g transform="translate(32,32)">
                                  <g class="am-weather-sun am-weather-sun-shiny am-weather-easing-ease-in-out">
                                      <g>
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(45)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(90)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(135)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(180)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(225)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(270)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(315)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                  </g>
                                  <circle cx="0" cy="0" fill="orange" r="5" stroke="orange" stroke-width="2"/>
                              </g>
                          </g>
                      </svg>`;
                        }
                      }
                    }
                  });
              }

              emptyArr = arr.filter((data) => {
                return data
                  .toLowerCase()
                  .startsWith(userData.toLocaleLowerCase());
              });

              emptyArr = emptyArr.map((data) => {
                return (data = `<li>${data}</li>`);
              });
              searchInput.classList.add("active");
              showSuggestions(emptyArr);
              const allList = autocompleteBox.querySelectorAll("li");

              allList.forEach((list) => {
                list.addEventListener("click", () => {
                  select(list);
                });
              });
            });
        } else {
          searchInput.classList.remove("active");
        }

        const select = (element) => {
          //function is invalid
          let selectData = element.textContent;
          input.value = selectData;
          autocompleteBox.addEventListener("click", () => {
            fetch(
              `https://api.openweathermap.org/data/2.5/weather?q=${selectData}&appid=${apiKey}&units=metric`
            )
              .then((res) => res.json())
              .then((data) => {
                console.log(data); //dom here

                const cityName = data.name;
                const cityTimeZone = data.timezone;
                const clouds = data.clouds;
                const weather = data.weather[0].main;
                const countryName = data.sys.country;
                const windSpeed = data.wind.speed;
                const temperature = data.main.temp;
                const feelsLike = data.main.feels_like;
                const humidity = data.main.humidity;

                const timeConvert = (offsetSeconds) => {
                  const offset = offsetSeconds / 60 / 60;
                  const date = new Date();
                  const utc = date.getTime() + date.getTimezoneOffset() * 60000;
                  return new Date(utc + 3600000 * offset);
                };

                fetch("https://restcountries.com/v3.1/all")
                  .then((res) => res.json())
                  .then((data) => {
                    console.log(data);
                    for (const abb of data) {
                      if (abb.cca2 == countryName) {
                        const country = abb.name.common;
                        console.log(country);

                        city.textContent = cityName;
                        Country.textContent = country;
                        time.textContent = cityTimeZone;
                        Weather.innerHTML = weather;
                        WindSpeed.textContent =
                          `Wind Speed ${Math.round(windSpeed)}` + " m/s";
                        temp.textContent =
                          `${Math.round(temperature)} ` + " °C";
                        FeelsLike.textContent =
                          `Feels like ${Math.round(feelsLike)} ` + " °C";
                        Humidity.innerHTML = `Humidity ${humidity}%`; //add the svg here

                        card.append(city, time, Weather, temp, weatherIcon);
                        console.log(Weather);
                        searchWeatherBox.append(card);

                        countryCard.append(Country);
                        humidityCard.append(Humidity);
                        windSpeedCard.append(WindSpeed);
                        feelsLikeCard.append(FeelsLike);

                        card.append(
                          countryCard,
                          humidityCard,
                          windSpeedCard,
                          feelsLikeCard
                        );

                        // Clouds.innerHTML = clouds

                        if (Weather.textContent === "Clouds") {
                          weatherIcon.innerHTML = `<svg
                          class = CLOUD'
                          version="1.1"
                          xmlns="http://www.w3.org/2000/svg"
                          xmlns:xlink="http://www.w3.org/1999/xlink"
                          width="100"
                          height="100"
                          viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                              <feMerge>
                                <feMergeNode/>
                                <feMergeNode in="SourceGraphic"/>
                              </feMerge>
                              </filter>
                              </defs>
                              <g filter="url(#blur)" id="cloudy">
                                  <g transform="translate(20,10)">
                                      <g class="am-weather-cloud-1">
                                          <path d="M47.7,35.4     c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3     c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#91C0F8" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-10,-8), scale(0.6)"/>
                                      </g>
                                      <g class="am-weather-cloud-2">
                                          <path d="M47.7,35.4     c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3     c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#57A0EE" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-20,-11)"/>
                                      </g>
                                  </g>
                              </g>
                          </svg>`;
                        }

                        if (Weather.textContent === "Rain") {
                          weatherIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="64" height="64" viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                                  <feMerge> 
                                      <feMergeNode/>
                                      <feMergeNode in="SourceGraphic"/> 
                                  </feMerge>
                              </filter>

                          </defs>
                          <g filter="url(#blur)" id="rainy-6">
                              <g transform="translate(20,10)">
                                  <g>
                                      <path d="M47.7,35.4c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3    c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#57A0EE" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-20,-11)"/>
                                  </g>
                              </g>
                              <g transform="translate(31,46), rotate(10)">
                                  <line class="am-weather-rain-1" fill="none" stroke="#91C0F8" stroke-dasharray="4,4" stroke-linecap="round" stroke-width="2" transform="translate(-4,1)" x1="0" x2="0" y1="0" y2="8"/>
                                  <line class="am-weather-rain-2" fill="none" stroke="#91C0F8" stroke-dasharray="4,4" stroke-linecap="round" stroke-width="2" transform="translate(0,-1)" x1="0" x2="0" y1="0" y2="8"/>
                                  <line class="am-weather-rain-1" fill="none" stroke="#91C0F8" stroke-dasharray="4,4" stroke-linecap="round" stroke-width="2" transform="translate(4,0)" x1="0" x2="0" y1="0" y2="8"/>
                              </g>
                          </g>
                      </svg>`;
                        }

                        if (Weather.textContent === "Snow") {
                          weatherIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="64" height="64" viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                                  <feMerge> 
                                      <feMergeNode/>
                                      <feMergeNode in="SourceGraphic"/> 
                                  </feMerge>
                              </filter>
                          </defs>
                          <g filter="url(#blur)" id="snowy-6">
                              <g transform="translate(20,10)">
                                  <g class="am-weather-cloud-2">
                                      <path d="M47.7,35.4c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3    c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#57A0EE" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-20,-11)"/>
                                  </g>
                                  <g class="am-weather-snow-1">
                                      <g transform="translate(3,28)">
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1.2" transform="translate(0,9), rotate(0)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(45)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(90)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(135)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                      </g>
                                  </g>
                                  <g class="am-weather-snow-2">
                                      <g transform="translate(11,28)">
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1.2" transform="translate(0,9), rotate(0)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(45)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(90)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(135)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                      </g>
                                  </g>
                                  <g class="am-weather-snow-3">
                                      <g transform="translate(20,28)">
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1.2" transform="translate(0,9), rotate(0)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(45)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(90)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                          <line fill="none" stroke="#57A0EE" stroke-linecap="round" stroke-width="1" transform="translate(0,9), rotate(135)" x1="0" x2="0" y1="-2.5" y2="2.5"/>
                                      </g>
                                  </g>
                              </g>
                          </g>
                      </svg>`;
                        }

                        if (Weather.textContent === "Thunder") {
                          weatherIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="64" height="64" viewbox="0 0 64 64">
                          <defs>
                              <filter id="blur" width="200%" height="200%">
                                  <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
                                  <feOffset dx="0" dy="4" result="offsetblur"/>
                                  <feComponentTransfer>
                                      <feFuncA type="linear" slope="0.05"/>
                                  </feComponentTransfer>
                                  <feMerge> 
                                      <feMergeNode/>
                                      <feMergeNode in="SourceGraphic"/> 
                                  </feMerge>
                              </filter>
                          </defs>
                          <g filter="url(#blur)" id="day">
                              <g transform="translate(32,32)">
                                  <g class="am-weather-sun am-weather-sun-shiny am-weather-easing-ease-in-out">
                                      <g>
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(45)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(90)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(135)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(180)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(225)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(270)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                      <g transform="rotate(315)">
                                          <line fill="none" stroke="orange" stroke-linecap="round" stroke-width="2" transform="translate(0,9)" x1="0" x2="0" y1="0" y2="3"/>
                                      </g>
                                  </g>
                                  <circle cx="0" cy="0" fill="orange" r="5" stroke="orange" stroke-width="2"/>
                              </g>
                          </g>
                      </svg>`;
                        }

                        // //weather.svg for weather

                        // searchWeatherBox.append(card);
                      }
                    }
                  });
              });
          });
          searchInput.classList.remove("active");
        };

        const showSuggestions = (list) => {
          let listData;
          if (!list.length) {
            let userVal = input.value;
            listData = `<li>${userVal}</li>`;
          } else {
            listData = list.join(` `);
          }
          autocompleteBox.innerHTML = listData;
        };
      });
    });

  // const tashkentWeather = () => {
  //   fetch(
  //     `https://api.openweathermap.org/data/2.5/weather?q=Tashkent&appid=${apiKey}&units=metric`
  //   )
  //     .then((response) => response.json())
  //     .then((data) => {
  //       console.log(data);
  //       const weatherIcon = document.createElement("div");
  //       const cityName = data.name;
  //       const cityTimeZone = data.timezone;
  //       const clouds = data.clouds;
  //       const weather = data.weather[0].main;
  //       const countryName = data.sys.country;
  //       const windSpeed = data.wind.speed;
  //       const temperature = data.main.temp;
  //       const feelsLike = data.main.feels_like;
  //       const humidity = data.main.humidity;

  //       fetch("https://restcountries.com/v3.1/all")
  //         .then((res) => res.json())
  //         .then((data) => {
  //           console.log(data);
  //           for (const abb of data) {
  //             if (abb.cca2 == countryName) {
  //               const country = abb.name.common;
  //               console.log(country);

  //               const timeConvert = (offsetSeconds) => {
  //                 const offset = offsetSeconds / 60 / 60;
  //                 const date = new Date();
  //                 const utc = date.getTime() + date.getTimezoneOffset() * 60000;
  //                 return new Date(utc + 3600000 * offset);
  //               };

  //               console.log(
  //                 cityName,
  //                 cityTimeZone,
  //                 clouds,
  //                 weather,
  //                 country,
  //                 windSpeed,
  //                 temperature,
  //                 feelsLike,
  //                 humidity,
  //                 timeConvert(cityTimeZone)
  //                 // secToHour(cityTimeZone)
  //                 // calcTime(cityName, cityTimeZone)
  //               );

  //               if (temperature < 0) {
  //                 console.log("cold");
  //               }
  //               if (temperature > 0) {
  //                 console.log("warm");
  //               }
  //               if (weather == "Snow") {
  //                 console.log("snow");
  //                 weatherIcon.innerHTML = `
  //               <!-- Snowy -->
  //               <div class="element">
  //                 <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 55.1 52.5" style="enable-background:new 0 0 55.1 52.5;" xml:space="preserve">
  //                   <g id="Cloud_7">
  //                     <g id="White_cloud_7">
  //                       <path id="XMLID_8_" class="white" d="M47.2,34.5H7.9c-4.3,0-7.9-3.5-7.9-7.9l0,0c0-4.3,3.5-7.9,7.9-7.9h39.4c4.3,0,7.9,3.5,7.9,7.9 v0C55.1,30.9,51.6,34.5,47.2,34.5z"/>
  //                       <circle id="XMLID_5_" class="white" cx="17.4" cy="17.3" r="9.3"/>
  //                       <circle id="XMLID_1_" class="white" cx="34.5" cy="15.6" r="15.6"/>
  //                     </g>
  //                     <circle class="white" cx="37" cy="43.5" r="3">
  //                       <animateTransform attributeName="transform"
  //                         attributeType="XML"
  //                         dur="1.5s"
  //                         keyTimes="0;0.33;0.66;1"
  //                         repeatCount="indefinite"
  //                         type="translate"
  //                         values="1 -2;3 2; 1 4; 2 6"
  //                         calcMode="linear">
  //                       </animateTransform>
  //                     </circle>
  //                     <circle class="white" cx="27" cy="43.5" r="3">
  //                       <animateTransform attributeName="transform"
  //                         attributeType="XML"
  //                         dur="1.5s"
  //                         keyTimes="0;0.33;0.66;1"
  //                         repeatCount="indefinite"
  //                         type="translate"
  //                         values="1 -2;3 2; 1 4; 2 6"
  //                         calcMode="linear">
  //                       </animateTransform>
  //                     </circle>
  //                     <circle class="white" cx="17" cy="43.5" r="3">
  //                       <animateTransform attributeName="transform"
  //                         attributeType="XML"
  //                         dur="1.5s"
  //                         keyTimes="0;0.33;0.66;1"
  //                         repeatCount="indefinite"
  //                         type="translate"
  //                         values="1 -2;3 2; 1 4; 2 6"
  //                         calcMode="linear">
  //                       </animateTransform>
  //                     </circle>
  //                   </g>
  //                 </svg>
  //               </div>
  //             </div>`;
  //               }
  //               if (weather == "Rain") {
  //                 console.log("rainy");
  //                 weatherIcon.innerHTML = `   <!-- Rainy -->
  //               <div class="element">
  //                 <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 55.1 60" style="enable-background:new 0 0 55.1 49.5;" xml:space="preserve">
  //                   <g id="Cloud_2">
  //                     <g id="Rain_2">
  //                       <path id="rain_2_left" class="white" d="M20.7,46.4c0,1.7-1.4,3.1-3.1,3.1s-3.1-1.4-3.1-3.1c0-1.7,3.1-7.8,3.1-7.8 S20.7,44.7,20.7,46.4z"></path>
  //                       <path id="rain_2_mid" class="white" d="M31.4,46.4c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1c0-1.7,3.1-7.8,3.1-7.8 S31.4,44.7,31.4,46.4z"></path>
  //                       <path id="rain_2_right" class="white" d="M41.3,46.4c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1c0-1.7,3.1-7.8,3.1-7.8 S41.3,44.7,41.3,46.4z"></path>
  //                       <animateTransform attributeName="transform"
  //                         attributeType="XML"
  //                         dur="1s"
  //                         keyTimes="0;1"
  //                         repeatCount="indefinite"
  //                         type="translate"
  //                         values="0 0;0 10"
  //                         calcMode="linear">
  //                       </animateTransform>
  //                       <animate attributeType="CSS"
  //                       attributeName="opacity"
  //                       attributeType="XML"
  //                       dur="1s"
  //                       keyTimes="0;1"
  //                       repeatCount="indefinite"
  //                       values="1;0"
  //                       calcMode="linear"/>
  //                     </g>
  //                     <g id="White_cloud_2">
  //                       <path id="XMLID_14_" class="white" d="M47.2,34.5H7.9c-4.3,0-7.9-3.5-7.9-7.9l0,0c0-4.3,3.5-7.9,7.9-7.9h39.4c4.3,0,7.9,3.5,7.9,7.9 v0C55.1,30.9,51.6,34.5,47.2,34.5z"/>
  //                       <circle id="XMLID_13_" class="white" cx="17.4" cy="17.3" r="9.3"/>
  //                       <circle id="XMLID_10_" class="white" cx="34.5" cy="15.6" r="15.6"/>
  //                     </g>
  //                   </g>
  //                 </svg>
  //               </div>
  //       `;
  //               }
  //               if (weather == "Mist") {
  //                 //Mist
  //                 console.log("Mist");
  //                 weatherIcon.innerHTML = `<!-- Cloudy -->
  //               <div class="element">
  //                 <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 60.7 40" style="enable-background:new 0 0 60.7 40;" xml:space="preserve">
  //                   <g id="Cloud_1">
  //                     <g id="White_cloud_1">
  //                       <path id="XMLID_2_" class="white" d="M47.2,40H7.9C3.5,40,0,36.5,0,32.1l0,0c0-4.3,3.5-7.9,7.9-7.9h39.4c4.3,0,7.9,3.5,7.9,7.9v0 C55.1,36.5,51.6,40,47.2,40z"/>
  //                       <circle id="XMLID_3_" class="white" cx="17.4" cy="22.8" r="9.3"/>
  //                       <circle id="XMLID_4_" class="white" cx="34.5" cy="21.1" r="15.6"/>
  //                       <animateTransform attributeName="transform"
  //                         attributeType="XML"
  //                         dur="6s"
  //                         keyTimes="0;0.5;1"
  //                         repeatCount="indefinite"
  //                         type="translate"
  //                         values="0;5;0"
  //                         calcMode="linear">
  //                       </animateTransform>
  //                     </g>
  //                     <g id="Gray_cloud_1">
  //                       <path id="XMLID_6_" class="gray" d="M54.7,22.3H33.4c-3.3,0-6-2.7-6-6v0c0-3.3,2.7-6,6-6h21.3c3.3,0,6,2.7,6,6v0 C60.7,19.6,58,22.3,54.7,22.3z"/>
  //                       <circle id="XMLID_7_" class="gray" cx="45.7" cy="10.7" r="10.7"/>
  //                       <animateTransform attributeName="transform"
  //                         attributeType="XML"
  //                         dur="6s"
  //                         keyTimes="0;0.5;1"
  //                         repeatCount="indefinite"
  //                         type="translate"
  //                         values="0;-3;0"
  //                         calcMode="linear">
  //                       </animateTransform>
  //                     </g>
  //                   </g>
  //                 </svg>
  //               </div>
  //       `;
  //               }
  //               if (weather == "Wind") {
  //                 console.log("windy");
  //                 weatherIcon.innerHTML = "";
  //               }
  //               if (weather == "Sun") {
  //                 console.log("sunny");
  //                 weatherIcon.innerHTML = "";
  //               }
  //               if (weather == "Clear") {
  //                 console.log("clear");
  //                 weatherIcon.innerHTML = "";
  //               }
  //               if (weather == "Clouds") {
  //                 console.log("cloudy");
  //                 weatherIcon.innerHTML = "";
  //               }
  //               if (weather == "Haze") {
  //                 console.log("hazy");
  //                 weatherIcon.innerHTML = "";
  //               }
  //               if (weather == "Tornado") {
  //                 console.log("tornado");
  //               }
  //               const card = document.createElement("div");
  //               card.className = "card-deck card";
  //               const city = document.createElement("h5");
  //               city.className = "city";
  //               const Country = document.createElement("h4");
  //               country.className = "country";
  //               const time = document.createElement("p");
  //               time.className = "time";
  //               const Weather = document.createElement("div");
  //               Weather.className = "weather-container";
  //               const WindSpeed = document.createElement("p");
  //               WindSpeed.className = "wind-speed";
  //               const temp = document.createElement("h6");
  //               temp.className = "temperature";
  //               const FeelsLike = document.createElement("h6");
  //               FeelsLike.className = "temp-feel";
  //               const Humidity = document.createElement("h6");
  //               Humidity.className = "humidity";
  //               const Clouds = document.createElement("div");
  //               Clouds.className = "clouds";

  //               city.textContent = cityName;
  //               country.textContent = countryName;
  //               time.textContent = cityTimeZone;
  //               Weather.innerHTML = weather;
  //               WindSpeed.textContent = windSpeed;
  //               temp.textContent = temperature;
  //               FeelsLike.textContent = feelsLike;
  //               Humidity.textContent = humidity;
  //               // Clouds.innerHTML = clouds;
  //               card.append(
  //                 city,
  //                 country,
  //                 time,
  //                 Weather,
  //                 WindSpeed,
  //                 temp,
  //                 FeelsLike,
  //                 Humidity,
  //                 // Clouds,
  //                 weatherIcon
  //               );

  //               defaultWeather.append(card);
  //             }
  //           }
  //         });
  //     });
  // };
  // tashkentWeather();
};
weather();

// const forStyling = () => {
//   fetch(
//     `https://api.openweathermap.org/data/2.5/weather?q=london&appid=${apiKey}&units=metric`
//   ) //putting it before the condition would make more sense
//     .then((response) => response.json())
//     .then((data) => {
//       console.log(data);
//       const cityName = data.name;
//       const cityTimeZone = data.timezone;
//       const clouds = data.clouds;
//       const weather = data.weather[0].main;
//       const countryName = data.sys.country;
//       const windSpeed = data.wind.speed;
//       const temperature = data.main.temp;
//       const feelsLike = data.main.feels_like;
//       const humidity = data.main.humidity;
//       city.textContent = cityName;
//       Country.textContent = countryName;
//       time.textContent = cityTimeZone;
//       Weather.innerHTML = weather;
//       WindSpeed.textContent = windSpeed;
//       temp.textContent = temperature;
//       FeelsLike.textContent = feelsLike;
//       Humidity.textContent = humidity;
//       // Clouds.innerHTML = clouds
//       card.append(city, time, Weather, temp, weatherIcon);
//       console.log(Weather);
//       searchWeatherBox.append(card);

//       countryCard.append(Country);
//       humidityCard.append(Humidity);
//       windSpeedCard.append(WindSpeed);
//       feelsLikeCard.append(FeelsLike);

//       card.append(countryCard, humidityCard, windSpeedCard, feelsLikeCard);
//       searchWeatherBox.append(card)

//       if (Weather.textContent === "Clouds") {
//         weatherIcon.innerHTML = `<svg
//           class = input-Cloud'
//           version="1.1"
//           xmlns="http://www.w3.org/2000/svg"
//           xmlns:xlink="http://www.w3.org/1999/xlink"
//           width="100"
//           height="100"
//           style='position: relative; bottom: 100px;'
//           viewbox="0 0 64 64">
//           <defs>
//               <filter id="blur" width="200%" height="200%">
//                   <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
//                   <feOffset dx="0" dy="4" result="offsetblur"/>
//                   <feComponentTransfer>
//                       <feFuncA type="linear" slope="0.05"/>
//                   </feComponentTransfer>
//               <feMerge>
//                 <feMergeNode/>
//                 <feMergeNode in="SourceGraphic"/>
//               </feMerge>
//               </filter>
//               </defs>
//               <g filter="url(#blur)" id="cloudy">
//                   <g transform="translate(20,10)">
//                       <g class="am-weather-cloud-1">
//                           <path d="M47.7,35.4     c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3     c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#91C0F8" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-10,-8), scale(0.6)"/>
//                       </g>
//                       <g class="am-weather-cloud-2">
//                           <path d="M47.7,35.4     c0-4.6-3.7-8.2-8.2-8.2c-1,0-1.9,0.2-2.8,0.5c-0.3-3.4-3.1-6.2-6.6-6.2c-3.7,0-6.7,3-6.7,6.7c0,0.8,0.2,1.6,0.4,2.3     c-0.3-0.1-0.7-0.1-1-0.1c-3.7,0-6.7,3-6.7,6.7c0,3.6,2.9,6.6,6.5,6.7l17.2,0C44.2,43.3,47.7,39.8,47.7,35.4z" fill="#57A0EE" stroke="white" stroke-linejoin="round" stroke-width="1.2" transform="translate(-20,-11)"/>
//                       </g>
//                   </g>
//               </g>
//           </svg>`;
//       }
//     });
// };
// forStyling();
